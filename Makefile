PROJECT = bletalk

# Compilation options for EFM32 cpu
CC      = arm-none-eabi-gcc
AR		= arm-none-eabi-ar
OBJCOPY = arm-none-eabi-objcopy
CFLAGS ?= -O2 -g3 -ggdb -Wall
CFLAGS += -std=gnu99 -fwrapv -fno-strict-aliasing
CFLAGS += -ffunction-sections
CFLAGS += -DBGM113A256V2=1 -DHAL_CONFIG=1
CFLAGS += -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=softfp
CFLAGS += -D__STACK_SIZE=0x1000
LFLAGS  = -Wl,--gc-sections

# Path to SiliconLabs Gecko SDK
SDKDIR = $(HOME)/SimplicityStudio/developer/sdks/gecko_sdk_suite/v2.5

# SDK include directories
CFLAGS += -I$(SDKDIR)/platform/Device/SiliconLabs/BGM1/Include
CFLAGS += -I$(SDKDIR)/hardware/module/config
CFLAGS += -I$(SDKDIR)/platform/CMSIS/Include
CFLAGS += -I$(SDKDIR)/platform/emlib/inc
CFLAGS += -I$(SDKDIR)/platform/bootloader/api
CFLAGS += -I$(SDKDIR)/protocol/bluetooth/ble_stack/inc/soc
CFLAGS += -I$(SDKDIR)/protocol/bluetooth/ble_stack/inc/common
CFLAGS += -I$(SDKDIR)/app/bluetooth/common/util

# MCU linker script
LFLAGS += -L$(SDKDIR)/protocol/bluetooth/ble_stack/linker/GCC/ -Tbgm113a256v2.ld

# MCU support library
EMLIB_CSRC = $(wildcard $(SDKDIR)/platform/emlib/src/*.c)
EMLIB_OBJS = $(patsubst %.c,build/emlib/%.o,$(notdir $(EMLIB_CSRC)))
LIBS += build/emdrv/sleep.o
LIBS += build/emlib.a

# Bluetooth stack libraries
LIBS += build/bgm1/startup_bgm1.o build/bgm1/system_bgm1.o
LIBS += build/bootloader.o
LIBS += $(SDKDIR)/protocol/bluetooth/lib/EFR32BG1B/GCC/binapploader.o
LIBS += $(SDKDIR)/protocol/bluetooth/lib/EFR32BG1B/GCC/libbluetooth.a
LIBS += $(SDKDIR)/protocol/bluetooth/lib/EFR32BG1B/GCC/libmbedtls.a
LIBS += $(SDKDIR)/protocol/bluetooth/lib/EFR32BG1B/GCC/libpsstore.a
LIBS += $(SDKDIR)/platform/radio/rail_lib/autogen/librail_release/librail_config_bgm113a256v2_gcc.a
LIBS += $(SDKDIR)/platform/radio/rail_lib/autogen/librail_release/librail_module_efr32xg1_gcc_release.a

# Libgsm audio compression library
LIBGSM_CSRC = libgsm/src/add.c libgsm/src/code.c libgsm/src/decode.c libgsm/src/gsm_decode.c libgsm/src/gsm_encode.c \
	      libgsm/src/gsm_explode.c libgsm/src/gsm_implode.c libgsm/src/long_term.c libgsm/src/lpc.c \
	      libgsm/src/preprocess.c libgsm/src/rpe.c libgsm/src/short_term.c libgsm/src/table.c
LIBGSM_OBJS = $(patsubst %.c,build/libgsm/%.o,$(notdir $(LIBGSM_CSRC)))
LIBGSM_CFLAGS = -DUSE_FLOAT_MUL -DFAST -DSASR -Wno-comment
CFLAGS += -Ilibgsm/inc
LIBS += build/libgsm.a

# Standard system libraries
SYSLIBS += -lm -lgcc -lc -lnosys

# Source code files in this project
CSRCS += main.c bluetooth.c board.c application_properties.c
CSRCS += audio.c binlog.c
CFLAGS += -I src

# Autogenerated GATT database file
CSRCS += gatt_db.c
CFLAGS += -I build

OBJS = $(CSRCS:%.c=build/%.o)
DEPS := $(OBJS:%.o=%.d)

GDB = arm-none-eabi-gdb
OOCD = openocd
OOCDFLAGS = -f interface/stlink-v2.cfg -f target/efm32.cfg

all: build build/$(PROJECT).elf

clean:
	rm -rf build

build:
	mkdir -p build
	mkdir -p build/bgm1
	mkdir -p build/emlib
	mkdir -p build/emdrv
	mkdir -p build/libgsm

start_openocd:
	pidof openocd || $(OOCD) $(OOCDFLAGS)

program: build/$(PROJECT).elf
	( echo "reset halt; program $< verify reset exit" | nc localhost 4444 ) || \
		 $(OOCD) $(OOCDFLAGS) -c "init; reset halt; program $< verify reset exit"

debug:
	$(GDB) -iex 'target extended :3333' build/$(PROJECT).elf

build/$(PROJECT).elf: $(OBJS) $(LIBS)
	$(CC) $(CFLAGS) $(LFLAGS) -o $@ -Wl,--start-group $(OBJS) $(LIBS) -Wl,--end-group \
			-Wl,--start-group $(SYSLIBS) -Wl,--end-group
	
	@echo
	@arm-none-eabi-size -t $@

-include $(DEPS)

build/%.o: src/%.c
	$(CC) $(CFLAGS) -MMD -c -o $@ $<

# Build rules for GATT database
src/gatt_db.c: src/gatt.xml
	$(SDKDIR)/protocol/bluetooth/bin/bgbuild -g $<

# Build rules for SDK libraries
build/emlib/%.o: $(SDKDIR)/platform/emlib/src/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

build/emdrv/%.o: $(SDKDIR)/platform/emdrv/sleep/src/%.c
	$(CC) $(CFLAGS) -c -I $(SDKDIR)/platform/emdrv/sleep/inc -o $@ $<

build/bgm1/%.o: $(SDKDIR)/platform/Device/SiliconLabs/BGM1/Source/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

build/bgm1/%.o: $(SDKDIR)/platform/Device/SiliconLabs/BGM1/Source/GCC/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

build/emlib.a: $(EMLIB_OBJS)
	$(AR) cr $@ $^

build/bootloader.o: $(SDKDIR)/platform/bootloader/sample-apps/bootloader-uart-bgapi/bgm113a256v2-brd4301a/bootloader-uart-bgapi-combined.s37
	$(OBJCOPY) -I srec -O elf32-littlearm -B arm --prefix-sections=.binbootloader \
		--set-section-flags *=contents,alloc,load,readonly,data \
		--gap-fill 0 --pad-to 0x4000 $< $@

# Build rules for libgsm
build/libgsm/%.o: libgsm/src/%.c
	$(CC) $(CFLAGS) $(LIBGSM_CFLAGS) -c -o $@ $<

build/libgsm.a: $(LIBGSM_OBJS)
	$(AR) cr $@ $^
